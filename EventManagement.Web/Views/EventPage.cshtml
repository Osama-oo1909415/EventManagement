@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.EventPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
	Layout = null; // We will handle layout later
}
<!DOCTYPE html>
<html>
<head>
    <title>@Model.EventTitle</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    
    <!-- OpenLayers CSS for the map -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@v9.2.4/ol.css">
    <style>
        /* Set a size for the map container */
        .map {
            height: 400px;
            width: 100%;
            border-radius: 0.5rem;
            border: 1px solid #dee2e6;
        }
    </style>
</head>
<body class="bg-light">

    <div class="container py-5">
    
        <!-- Event Title -->
        <h1>@Model.EventTitle</h1>
        
        <!-- Event Date -->
        <p class="lead"><strong>Date:</strong> @Model.EventDate.ToString("dddd, dd MMMM yyyy")</p>
        <hr/>
        
        <div class="row g-5">
            <div class="col-md-8">
                <!-- Featured Image -->
                @if (Model.FeaturedImage != null)
                {
                    <img src="@Model.FeaturedImage.Url()" alt="@Model.EventTitle" class="img-fluid rounded mb-4" />
                }
                
                <!-- Description -->
                <div class="p-4 bg-white rounded shadow-sm">
                    <h2>About this Event</h2>
                    @Html.Raw(Model.Description)
                </div>

                <!-- Speakers Section -->
                @{
                    var speakers = Model.EventSpeakers;
                    if (speakers != null && speakers.Any())
                    {
                        <div class="mt-5 p-4 bg-white rounded shadow-sm">
                            <h2>Speakers</h2>
                            <div class="row">
                                @foreach (var speaker in speakers.OfType<Speaker>())
                                {
                                    <div class="col-md-6 mb-3">
                                        <div class="d-flex align-items-center">
                                            @{
                                                var photo = speaker.Photo;
                                                if (photo != null)
                                                {
                                                    <img src="@photo.Url()" class="rounded-circle me-3" style="width:60px; height:60px; object-fit: cover;" />
                                                }
                                            }
                                            <div>
                                                <h5 class="mb-0">@speaker.SpeakerName</h5>
                                                <p class="mb-0 text-muted">@speaker.Bio</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="col-md-4">
                <!-- Map Section -->
                <div class="p-4 bg-white rounded shadow-sm">
                    <h2>Location</h2>
                    <div id="map" class="map mt-3"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- OpenLayers JS for the map -->
    <script src="https://cdn.jsdelivr.net/npm/ol@v9.2.4/dist/ol.js"></script>
    <script>
        // Get the coordinate string from our Umbraco model
        const coordsString = "@Model.Coordinates";
        
        if (coordsString) {
            // Split the string into latitude and longitude
            const parts = coordsString.split(',');
            const lat = parseFloat(parts[0].trim());
            const lon = parseFloat(parts[1].trim());

            // Initialize the map
            const map = new ol.Map({
                target: 'map', // The ID of the div to render the map in
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM() // OpenStreetMap is the map provider
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([lon, lat]), // Set the center of the map
                    zoom: 15 // Set the zoom level
                })
            });

            // Create a marker
            const marker = new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: [
                        new ol.Feature({
                            geometry: new ol.geom.Point(ol.proj.fromLonLat([lon, lat]))
                        })
                    ]
                }),
                style: new ol.style.Style({
                    image: new ol.style.Icon({
                        anchor: [0.5, 46],
                        anchorXUnits: 'fraction',
                        anchorYUnits: 'pixels',
                        src: 'https://openlayers.org/en/latest/examples/data/icon.png'
                    })
                })
            });

            // Add the marker to the map
            map.addLayer(marker);
        }
    </script>
</body>
</html>
